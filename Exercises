// 1. Calculate the volume of a pyramid.

#include <stdlib.h>

int main() {
    double l,w,h,V;
    printf("l=");
    scanf("%lf",&l);
    printf("w=");
    scanf("%lf",&w);
    printf("h=");
    scanf("%lf",&h);
    V=(l*w*h)/3;
 
    printf("Volume=%lf",V);


    return 0;
}

----------------------------------------------------------------------------------------------

// 2. Calculate the perimeter and area of a rectangle given its side lengths

#include <stdlib.h>

int main() {
    double P,A,a,b;
    printf("a = ");
    scanf("%lf",&a);
    printf("b = ");
    scanf("%lf",&b);
    P=2*(a+b);
    A=a*b;
    printf("Perimeter=%lf",P);
    printf("\nArea=%lf",A);
    return 0;
}

----------------------------------------------------------------------------------------------

// 3. Find the minimum value between two integers entered by the user.

#include <stdlib.h>
int main() {
    int a,b,min;
    printf("a=");
    scanf("%d",&a);
    printf("b=");
    scanf("%d",&b);
    min=a<b?a:b;
    printf("Min=%d\n",min);
    return 0;
}

------------------------------------If/Else----------------------------------------------------------
-----------------------------------------------------------------------------------------------------

// 4. Find the minimum value among three double type variables entered by the user.

#include <stdlib.h>

int main() {

    double a,b,c;
    printf("a = ");
    scanf("%lf",&a);
    printf("b = ");
    scanf("%lf",&b);
    printf("c = ");
    scanf("%lf",&c);
      if (a<= b&& a<=c) {
        printf("%lf is minimum", a);
    } else if (b<=a && b<=c) {
        printf("%lf is minimum", b);
    } else {
        printf("%lf is minimum", c);
    }

    return 0;
}

----------------------------------------------------------------------------------------------

// 5. Determine whether the sum of the digits in a given integer is a divisor of that integer. 

#include <stdlib.h>

int main() {
    int x,sum;
    printf("x = ");
    scanf("%d",&x);
    sum=x/100+x/10%10 +x%10;

    if(x%sum==0){
        printf("sum = %d", sum);
        printf("\nno remainder. ");
    }
    else{
        printf("sum = %d", sum);
        printf("\nremainder exists! ");
    }
        

    return 0;
}

----------------------------------------------------------------------------------------------

// 6. Calculate the product of the digits of a 3-digit integer and determines whether that product is even or odd.

#include <stdlib.h>

int main() {

    int x,m;
    printf("x = ");
    scanf("%d",&x);
    m=(x/100)*(x/10%10)*(x%10);
    
    if (m%2==0){
        printf("Product = %d",m);
        printf("\It is even.");
    }
    else {
        printf("Profuct = %d",m);
        printf("\It is odd.");
    }

    return 0;
}

------------------------------------While-----------------------------------------------------------
----------------------------------------------------------------------------------------------------

// 7. Generate a table of values for the function y = cos(x)*x, where x ranges from -10.0 to 25.0 with a step size of 0.1.

#include <stdlib.h>

int main() {
    double a = -10.0,b = 25.0,h = 0.1;
    printf("y=cos(x)\nx\t\t\ty\n");

    double x = a;
    while (x <= b) {
        double y = cos(x) * x; 
        printf("%lf\t\t%lf\n", x, y);
        x += h;
    }
    return 0;
}

----------------------------------------------------------------------------------------------

// 8. Calculate the arithmetic mean of the positive values of a given function y = 3x^4 - 5x^3 - x^2 - 6x - 3, within a specified range of x values.

#include <stdlib.h>

int main() {
    double a = -2.0, b= 5.8, h = 0.02,sum = 0.0;
    int count = 0;
    double x = a; 
    while (x <= b) {
        double y = 3 * (pow(x,4)) - 5 * (pow(x,3)) -pow(x,2) - 6 * x - 3;
    
        if (y > 0) {
            sum += y;
            count++;
        }
        x += h;
    }
    double mean = sum / count;

    printf(" arithmetic mean is %lf\n", mean);
 
    return 0;
}


------------------------------------For-------------------------------------------------------------
----------------------------------------------------------------------------------------------------

// 9. Calculate the sum of consecutive integers from 1 until the sum exceeds or equals 54.

#include <stdlib.h>

int main() {
    int sum=0, number;
    for (number=1; number<=30; number++) {
        sum += number;
        
        if (sum >= 54) {
            break;
        }
    }

    printf("Sum = %d\n", sum);

    return 0;
}

----------------------------------------------------------------------------------------------

// 10.  Calculate the sum of all multiples of 7 between 2 and 49, inclusive, but only adds them to the sum if they are less than 30. 

#include <stdlib.h>

int main() {

    int sum = 0;

    for (int number = 2; number <= 49; number++) {
        if (number % 7 == 0) {
            if (number < 30) {
                sum += number;
            } else {
                break;
            }
        }
    }

    printf("Sum = %d\n", sum);

    return 0;
}

----------------------------------------------------------------------------------------------

// 11. Calculate the product of consecutive integers starting from 1 and ending when the product exceeds 15,000. 

#include <stdlib.h>

int main() {
    
    int start = 1;
    int number;

    for (number = 1; number <= 40; number++) {
        start *= number;

        if (start > 15000) {
            break;
        }
    }

    printf("Result = %d\n", start);

    return 0;
}

----------------------------------------------------------------------------------------------

// 12.  Calculate the sum of integers from 11 to 39 that are divisible by 3.

#include <stdlib.h>

int main() {
 int sum = 0;

    for (int number = 11; number <= 39; number++) {
        if (number % 3 == 0) {
            sum += number;
        }
    }

    printf("Result = %d\n", sum);

    return 0;
}


------------------------------------Arrays-------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

/* 13. Initializes an array B with 14 elements and assigns increasing odd values starting from 1 to each element, which then prints the array B and constructs a histogram based on the values in B,
where each value determines the number of asterisks (*) to be printed on a separate line. */

#include <stdlib.h>

int main() {
    int B[14];
    int first = 1;
    for (int i = 0; i < 14; i++) {
        B[i] = first;
        first += 2;
    }

    printf("Array B: ");
    for (int i = 0; i < 14; i++) {
        printf("%d ", B[i]);
    }
    printf("\n");

    for (int i = 0; i < 14; i++) {
        for (int j = 0; j < B[i]; j++) {
            printf("*");
        }
        printf("\n");
    }

    return 0;
}

----------------------------------------------------------------------------------------------

/* 14. Generate an array A of 20 random integers within the range [-99, 99],
that finds the maximum element in the array and the smallest negative element (if any). */

#include <stdlib.h>
#include <time.h>

int main() {

    int A[20];
    int max_element = A[0];
    int min_negative = 0; 

    srand(time(NULL));

    for (int i = 0; i < 20; i++) {
        A[i] = rand()%199 - 99;
    }

  
    for (int i = 0; i < 20; i++) {
        if (A[i] > max_element) {
            max_element = A[i];
        }

        if (A[i] < 0 && (min_negative == 0 || A[i] < min_negative)) {
            min_negative = A[i];
        }
    }

    printf("\nArray A: ");
    for (int i = 0; i < 20; i++) {
        printf("%d ", A[i]);
    }
    printf("\nMax element: %d\n", max_element);
    printf("\nMin element: %d\n", min_negative);

    return 0;
}

----------------------------------------------------------------------------------------------

// 15. Calculate the sum of cubes of the product of elements in even and odd positions (indexes) within array M.

#include <stdio.h>
#include <math.h>


int main() {

    int M[13] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}; 
    int even_product_sum = 0; 
    int odd_product_sum = 0;

    for (int i = 0; i < 13; i++) {
        if (i % 2 == 0) { // Even index
            even_product_sum += M[i];
        } else { // Odd index
            odd_product_sum += M[i];
        }
    }

    int even_cubed = (int)pow(even_product_sum, 3);
    int odd_cubed = (int)pow(odd_product_sum, 3);

    int total_sum = even_cubed + odd_cubed;

    printf("Array M: ");
    for (int i = 0; i < 13; i++) {
        printf("%d ", M[i]);
    }
    printf("\n");

    printf("Sum: %d\n", total_sum);

    return 0;
}

----------------------------------------------------------------------------------------------

// 16. Find the smallest and largest elements in two given arrays, A and B.

#include <stdio.h>

int main() {

    int A[10] = {1, 8, 9, 10, 19, 12, 4, 9, 18888, 11};
    int B[10] = {2, 15, 19, 13, 6, 7, 1466, 97, 5, 9999};

    int smallestA = A[0];
    int largestA = A[0];
    int smallestB = B[0];
    int largestB = B[0];

    for (int i = 1; i < 10; i++) {
        if (A[i] < smallestA) {
            smallestA = A[i];
        }
        if (A[i] > largestA) {
            largestA = A[i];
        }

        if (B[i] < smallestB) {
            smallestB = B[i];
        }
        if (B[i] > largestB) {
            largestB = B[i];
        }
    }

    printf(" A: Smallest = %d, Largest = %d\n", smallestA, largestA);
    printf("B: Smallest = %d, Largest = %d\n", smallestB, largestB);

    return 0;
}

----------------------------------------------------------------------------------------------

// 17. Count the number of negative and non-negative (positive or zero) elements separately in a 3x4 matrix B

#include <stdio.h>

int main() {
    int B[3][4] = {
        {1, -1, 3, -4},
        {6, -9, 99, 9},
        {1, 2, -3, 4}
    };

    int negative = 0;
    int positive = 0;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 4; j++) {
            if (B[i][j] < 0) {
                negative++;
            } else {
                positive++;
            }
        }
    }

    printf("Negative: %d\n", negative);
    printf("Positive: %d\n", positive);

    return 0;
}

----------------------------------------------------------------------------------------------

// 18. Calculate the average of positive elements in a 4x5 integer matrix A and prints the result.

#include <stdio.h>

int main() {
    int A[4][5] = {
        {-1, -1, -1, -4, -1},
        {1, -9, 9, -9, -19},
        {-1, -1, -3, -1, -4},
        {-6, -17, -8, -19, -99}
    };
    int positive = 0;
    int count = 0;
    double avg = 0.0;

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            if (A[i][j] > 0) {
                positive += A[i][j];
                count++;
            }
        }
    }

    if (count > 0) {
        avg = (double)positive / count;
    }

    printf("average: %f\n", avg);

    return 0;
}

----------------------------------------------------------------------------------------------

/* 19. Initialize a 4x5 integer matrix A and then modifie its elements such that if an element is greater than 0, 
it is replaced by 1, otherwise, it is replaced by 0. */

#include <stdio.h>

int main() {

    int A[4][5] = {
        {1, -1, 1, -4, 1},
        {1, -9, 9, -9, -19},
        {1, 1, -3, 1, -4},
        {-6, -17, -8, -19, -99}
    };

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            if (A[i][j] > 0) {
                A[i][j] = 1;
            } else {
                A[i][j] = 0;
            }
        }
    }

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            printf("%d ", A[i][j]);
        }
        printf("\n");
    }

    return 0;
}

----------------------------------------------------------------------------------------------

// 20. Initialize a 5x5 integer matrix A with consecutive numbers in each row and then calculate the sum of the diagonal elements of the matrix

#include <stdio.h>

int main() {
    int A[5][5] = {
        {1, 2, 3, 4, 5},
        {6, 1, 8, 9, 10},
        {11, 12, 1, 14, 15},
        {16, 17, 18, 1, 20},
        {21, 22, 23, 24, 1}
    };

    int result = 0;

    for (int i = 0; i < 5; i++) {
        result += A[i][i];
    }

    printf("Result: %d\n", result);

    return 0;
}

------------------------------------Functions-------------------------------------------------------------
----------------------------------------------------------------------------------------------------------

/* 21. Declare Three functions:
product: Calculates the product of all elements in the array.
even: Calculates the sum of all even numbers in the array.
odd: Counts the number of odd numbers in the array. */


#include <stdio.h>

int product(int arr[], int size);
int even(int arr[], int size);
int odd(int arr[], int size);

int main() {
    int array[5] = {1, 2, 1, 2, 1};

    int product_result = product(array, 5);

    int even_sum = even(array, 5);

    int odd_count = odd(array, 5);

    printf("Product = %d\n", product_result);
    printf("Sum of even numbers = %d\n", even_sum);
    printf("Count of odd numbers = %d\n", odd_count);

    return 0;
}

int product(int arr[], int size) {
    int result = 1;

    for (int i = 0; i < size; i++) {
        result *= arr[i];
    }

    return result;
}

int even(int arr[], int size) {
    int sum = 0;

    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 == 0) {
            sum += arr[i];
        }
    }

    return sum;
}

int odd(int arr[], int size) {
    int count = 0;

    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 != 0) {
            count++;
        }
    }

    return count;
}


----------------------------------------------------------------------------------------------

/* 22. Declare six functions:

multiples_of_five_sum: Calculates the sum of elements in the array that are multiples of five.
average: Calculates the average value of all elements in the array.
non_twenty_elements_count: Counts the number of elements in the array that are not equal to 20.
twenty_elements_count: Counts the number of elements in the array that are equal to 20.
greater_than_twenty_count: Counts the number of elements in the array that are greater than 20.
less_than_twenty_count: Counts the number of elements in the array that are less than 20. */

#include <stdio.h>

int multiples_of_five_sum(int arr[], int size);
int average(int arr[], int size);
int non_twenty_elements_count(int arr[], int size);
int twenty_elements_count(int arr[], int size);
int greater_than_twenty_count(int arr[], int size);
int less_than_twenty_count(int arr[], int size);

int main() {
    int array[10] = {1, 0, 9, 20, 20, 21, 45, 99, -1, -2};

    int multiples_of_five_sum_result = multiples_of_five_sum(array, 10);
    int average_result = average(array, 10);
    int non_twenty_count_result = non_twenty_elements_count(array, 10);
    int twenty_count_result = twenty_elements_count(array, 10);
    int greater_than_twenty_result = greater_than_twenty_count(array, 10);
    int less_than_twenty_result = less_than_twenty_count(array, 10);

    printf("Multiples of five sum = %d\n", multiples_of_five_sum_result);
    printf("Average = %d\n", average_result);
    printf("Non-twenty elements count = %d\n", non_twenty_count_result);
    printf("Twenty elements count = %d\n", twenty_count_result);
    printf("Greater than twenty count = %d\n", greater_than_twenty_result);
    printf("Less than twenty count = %d\n", less_than_twenty_result);

    return 0;
}

int multiples_of_five_sum(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] % 5 == 0) {
            sum += arr[i];
        }
    }
    return sum;
}

int average(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }
    return sum / size;
}

int non_twenty_elements_count(int arr[], int size) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] != 20) {
            count++;
        }
    }
    return count;
}

int twenty_elements_count(int arr[], int size) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] == 20) {
            count++;
        }
    }
    return count;
}

int greater_than_twenty_count(int arr[], int size) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] > 20) {
            count++;
        }
    }
    return count;
}

int less_than_twenty_count(int arr[], int size) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] < 20) {
            count++;
        }
    }
    return count;
}

----------------------------------------------------------------------------------------------

/* 23. Declare six functions:
sum: Computes the sum of all elements in the 2D array.
product: Computes the product of all elements in the 2D array.
even_sum: Calculates the sum of all even elements in the 2D array.
odd_count: Counts the number of odd elements in the 2D array.
positive_sum: Calculates the sum of all positive elements in the 2D array.
negative_count: Counts the number of negative elements in the 2D array. */


#include <stdio.h>

int sum(int arr[][3], int rows, int columns);
int product(int arr[][3], int rows, int columns);
int even_sum(int arr[][3], int rows, int columns);
int odd_count(int arr[][3], int rows, int columns);
int positive_sum(int arr[][3], int rows, int columns);
int negative_count(int arr[][3], int rows, int columns);

int main() {
    
    int matrix[3][3] = {
        {0, 1, -1},
        {9, 19, 1},
        {0, -9, -9}
    };
    
    int sum_result = sum(matrix, 3, 3);
    int product_result = product(matrix, 3, 3);
    int even_sum_result = even_sum(matrix, 3, 3);
    int odd_count_result = odd_count(matrix, 3, 3);
    int positive_sum_result = positive_sum(matrix, 3, 3);
    int negative_count_result = negative_count(matrix, 3, 3);

    printf("Sum = %d\n", sum_result);
    printf("Product = %d\n", product_result);
    printf("Even sum = %d\n", even_sum_result);
    printf("Odd count = %d\n", odd_count_result);
    printf("Positive sum = %d\n", positive_sum_result);
    printf("Negative count = %d\n", negative_count_result);

    return 0;
}

int sum(int arr[][3], int rows, int columns) {
    int total = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            total += arr[i][j];
        }
    }

    return total;
}

int product(int arr[][3], int rows, int columns) {
    int result = 1;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            result *= arr[i][j];
        }
    }

    return result;
}

int even_sum(int arr[][3], int rows, int columns) {
    int total = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            if (arr[i][j] % 2 == 0) {
                total += arr[i][j];
            }
        }
    }

    return total;
}

int odd_count(int arr[][3], int rows, int columns) {
    int count = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            if (arr[i][j] % 2 != 0) {
                count++;
            }
        }
    }

    return count;
}

int positive_sum(int arr[][3], int rows, int columns) {
    int total = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            if (arr[i][j] > 0) {
                total += arr[i][j];
            }
        }
    }

    return total;
}

int negative_count(int arr[][3], int rows, int columns) {
    int count = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            if (arr[i][j] < 0) {
                count++;
            }
        }
    }

    return count;
}

----------------------------------------------------------------------------------------------

/* 24. Define a function newArray that takes two 2D integer arrays along with their dimensions as parameters, then
It adds 10 to each element of first array and stores the result in second array. */

#include <stdio.h>

void newArray(int array_1[][3], int array_2[][3], int rows, int cols);

int main() {
    int array_1[3][3] = {
        {0, 9, 99},
        {19, 2, 89},
        {-2, 1, 9}
    };

    int array_2[3][3];

    newArray(array_1, array_2, 3, 3);

    printf("Array 1:\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d\t", array_1[i][j]);
        }
        printf("\n");
    }

    printf("\nArray 2:\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d\t", array_2[i][j]);
        }
        printf("\n");
    }

    return 0;
}

void newArray(int array_1[][3], int array_2[][3], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            array_2[i][j] = array_1[i][j] + 10;
        }
    }
}

------------------------------------Other-----------------------------------------------------------------
----------------------------------------------------------------------------------------------------------

/* 25. Meet the following conditios:
If k and z are equal, skip the calculation.
If the sum of k and z is less than 10, y is determined based on the remainder of k divided by z.
If the remainder is 0, y is twice the value of k.
If the remainder is 1, y is the cosine of k squared.
If the remainder is 2, y is equal to z.
If the sum of k and z is greater than the third input number (c), y is assigned the value of z.
If the sum of k and z is equal to c, y is calculated as the square root of (k^5 + 2 * z^3). */

#include <stdio.h>
#include <math.h>

int main() {
    int k, z, c, y;

    for (int i = 0; i < 7; i++) {
        printf("Enter three numbers: ");
        scanf("%d, %d, %d", &k, &z, &c);

        if (k == z) {
            continue;
        } else if (k + z < 10) {
            switch (k % z) {
                case 0:
                    y = 2 * k;
                    printf("y=%d\n", y);
                    break;
                case 1:
                    y = cos(pow(k, 2));
                    printf("y=%d\n", y);
                    break;
                case 2:
                    y = z;
                    printf("y=%d\n", y);
                    break;
            }
        } else if (k + z > c) {
            y = z;
            printf("y=%d\n", y);
        } else if (k + z == c) {
            y = sqrt((pow(k, 5) + 2 * pow(z, 3)));
            printf("y=%d\n", y);
        }
    }

    return 0;
}


----------------------------------------------------------------------------------------------


/* 26. Generate a 5x5 matrix of random integers and displays it, then calculate the sum of the diagonals of the matrix. 
Meet the following conditions:
If the sum is negative, it constructs an array 'b' where each element is the sum of the negative elements in the corresponding column of the matrix.
If the sum is non-negative, it constructs 'b' such that each element is the maximum value in the corresponding column of the matrix. 



#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void array(int a[5][5]) {
    srand(time(NULL));

    for (int j = 0; j < 5; j++) {
        for (int i = 0; i < 5; i++) {
            a[j][i] = 10 - rand() % 20;
            printf("%d\t", a[j][i]);
        }
        printf("\n");
    }
}

int main() {
    int a[5][5], b[5], max, sum = 0;

    printf("Matrix A[5][5]:\n");
    array(a);

    for (int i = 0; i < 5; i++) {
        sum += (a[i][i] + a[i][4 - i]);
    }
    printf("\nSum: %d\n", sum);

    if (sum < 0) {
        for (int j = 0; j < 5; j++) {
            b[j] = 0;
            for (int i = 0; i < 5; i++) {
                if (a[i][j] < 0) {
                    b[j] += a[i][j];
                }
            }
        }
    } else {
        for (int j = 0; j < 5; j++) {
            max = a[0][j];
            for (int i = 0; i < 5; i++) {
                if (a[i][j] > max) {
                    max = a[i][j];
                }
            }
            b[j] = max;
        }
    }

    printf("\nResult Array:\n");
    for (int j = 0; j < 5; j++) {
        printf("%d ", b[j]);
    }

    return 0;
}

